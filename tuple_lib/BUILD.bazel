## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.
## Bazel package: @snarky//src/lib/baze58_check
## Dune file: /Users/gar/mina/snarky/tuple_lib/dune

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_interface",
    "ocaml_module",
    "ocaml_ns_module",
)

## Global Options
load(
    "//bzl:config.bzl",
    "ARCHIVE_OPTS",
    "GLOBAL_CLI_OPTS",
    "INTERFACE_OPTS",
    "MODULE_OPTS",
    "NS_MODULE_OPTS",
)

## Repo Options
load("//bzl/snarky:config.bzl", "SNARKY_OPTS")

PKG_OPTS = GLOBAL_CLI_OPTS + SNARKY_OPTS + []

LIB_1_OPTS = []

LIB_1_ARCHIVE_OPTS = PKG_OPTS + LIB_1_OPTS + ARCHIVE_OPTS

LIB_1_INTERFACE_OPTS = PKG_OPTS + LIB_1_OPTS + INTERFACE_OPTS

LIB_1_MODULE_OPTS = PKG_OPTS + LIB_1_OPTS + MODULE_OPTS

LIB_1_NS_MODULE_OPTS = PKG_OPTS + LIB_1_OPTS + NS_MODULE_OPTS

LIB_1_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:core_kernel",
]

PPX_1 = "//bzl/ppx:ppx[ppx_jane][ppx_deriving.eq][bisect_ppx]"

PPX_1_ARGS = [
    # do not sort (buildifier)
    "-inline-test-lib",
    "tuple_lib",
    "-conditional",
]

################################################################
## LIB 1
################################################################
ocaml_archive(
    name = "tuple_lib",
    doc = "Tuple types",
    opts = LIB_1_ARCHIVE_OPTS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Tuple_lib_ns",
        ":Double",
        ":Four",
        ":Intf",
        ":Quadruple",
        ":Triple",
        ":Tuple_lib",
    ],
)

ocaml_ns_module(
    name = "Tuple_lib_ns",
    ns = "tuple_lib",
    opts = LIB_1_NS_MODULE_OPTS,
    submodules = [
        # do not sort (buildifier)
        "double.ml",
        "four.ml",
        "intf.ml",
        "quadruple.ml",
        "triple.ml",
        "tuple_lib.ml",
    ],
)

ocaml_module(
    name = "Double",
    src = "double.ml",
    intf = "_Double",
    ns_module = ":Tuple_lib_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
    ],
)

ocaml_interface(
    name = "_Double",
    src = "double.mli",
    ns_module = ":Tuple_lib_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:private"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Intf",
    ],
)

ocaml_module(
    name = "Four",
    src = "four.ml",
    ns_module = ":Tuple_lib_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Double",
    ],
)

ocaml_module(
    name = "Intf",
    src = "intf.ml",
    ns_module = ":Tuple_lib_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
    ],
)

ocaml_module(
    name = "Quadruple",
    src = "quadruple.ml",
    intf = "_Quadruple",
    ns_module = ":Tuple_lib_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Four",
    ],
)

ocaml_interface(
    name = "_Quadruple",
    src = "quadruple.mli",
    ns_module = ":Tuple_lib_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:private"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Four",
        ":Intf",
    ],
)

ocaml_module(
    name = "Triple",
    src = "triple.ml",
    intf = "_Triple",
    ns_module = ":Tuple_lib_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
    ],
)

ocaml_interface(
    name = "_Triple",
    src = "triple.mli",
    ns_module = ":Tuple_lib_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:private"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Intf",
    ],
)

ocaml_module(
    name = "Tuple_lib",
    src = "tuple_lib.ml",
    ns_module = ":Tuple_lib_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Double",
        ":Four",
        ":Quadruple",
        ":Triple",
    ],
)
