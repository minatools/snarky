## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_executable",
    "ocaml_module",
    "ocaml_ns",
    "ppx_executable",
)
load(
    "//:BUILD.bzl",
    "GLOBAL_ARCHIVE_OPTS",
    "GLOBAL_EXECUTABLE_OPTS",
    "GLOBAL_MODULE_OPTS",
    "GLOBAL_NS_MODULE_OPTS",
    "GLOBAL_PPX_EXECUTABLE_OPTS",
)
load(
    "//snarky:BUILD.bzl",
    "REPO_ARCHIVE_OPTS",
    "REPO_EXECUTABLE_OPTS",
    "REPO_MODULE_OPTS",
    "REPO_NS_MODULE_OPTS",
    "REPO_PPX_EXECUTABLE_OPTS",
)
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")

bool_flag(
    name = "debug",
    build_setting_default = True,
)

config_setting(
    name = "enable_debug",
    flag_values = {":debug": str(True)},
)

PKG_DEBUG_OPT = select({
    ":enable_debug": ["-g"],
    "//conditions:default": [],
})

bool_flag(
    name = "verbose",
    build_setting_default = False,
)

config_setting(
    name = "enable_verbose",
    flag_values = {":verbose": str(True)},
)

PKG_VERBOSE_OPT = select({
    ":enable_verbose": ["-verbose"],
    "//conditions:default": [],
})

PKG_OPTS = PKG_DEBUG_OPT + PKG_VERBOSE_OPT

PKG_PPX_EXECUTABLE_OPTS = PKG_OPTS

PKG_ARCHIVE_OPTS = PKG_OPTS

PKG_NS_MODULE_OPTS = PKG_OPTS

PKG_EXECUTABLE_OPTS = PKG_OPTS

PKG_MODULE_OPTS = PKG_OPTS

## stanza_library.mustache
################################################################
## STANZA 1: LIBRARY SNARKY_BENCH
################################################################
SNARKY_BENCH_MODULE_OPTS = GLOBAL_MODULE_OPTS + REPO_MODULE_OPTS + PKG_MODULE_OPTS

SNARKY_BENCH_ARCHIVE_OPTS = GLOBAL_ARCHIVE_OPTS + REPO_ARCHIVE_OPTS + PKG_ARCHIVE_OPTS + ["-linkall"]

SNARKY_BENCH_NS_MODULE_OPTS = GLOBAL_NS_MODULE_OPTS + REPO_NS_MODULE_OPTS + PKG_NS_MODULE_OPTS

SNARKY_BENCH_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:core",
    "@snarky//src:snarky",
]

ocaml_archive(
    name = "snarky_bench",
    opts = SNARKY_BENCH_ARCHIVE_OPTS,
    visibility = ["//visibility:public"],
    deps = SNARKY_BENCH_DEPS + [
        # do not sort (buildifier)
        ":_Field_project",
    ],
)

ocaml_ns(
    name = "Snarky_bench_ns",
    ns = "snarky_bench",
    opts = SNARKY_BENCH_NS_MODULE_OPTS,
    submodules = [
        # do not sort (buildifier)
        "field_project.ml",
    ],
)

## ocaml_module.mustache
#############
ocaml_module(
    name = "_Field_project",
    src = "field_project.ml",
    ns = ":Snarky_bench_ns",
    opts = SNARKY_BENCH_MODULE_OPTS,
    ppx = ":ppx.exe",
    ppx_args = [
        # do not sort (buildifier)
    ],
    deps = SNARKY_BENCH_DEPS,
)

################################################################
## STANZA 2 (main)
################################################################

MAIN_OPTS = []

MAIN_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:core_bench.inline_benchmarks",
    "@snarky//bench:snarky_bench",
]

ocaml_executable(
    name = "main.exe",
    opts = MAIN_EXECUTABLE_OPTS,
    visibility = ["//visibility:public"],
    deps = MAIN_DEPS + [
        # do not sort (buildifier)
        "Main",
    ],
)

ocaml_module(
    name = "Main",
    src = "main.ml",
    opts = MAIN_MODULE_OPTS,
    deps = MAIN_DEPS + [
        # do not sort (buildifier)
    ],
)

## ppx_executable.mustache
###############
ppx_executable(
    name = "ppx.exe",
    lazy_deps = [
        # do not sort (buildifier)
        "@opam//pkg:ppx_expect.collector",
        "@opam//pkg:ppx_hash.runtime-lib",
        "@opam//pkg:ppx_sexp_conv.runtime-lib",
        "@opam//pkg:ppx_assert.runtime-lib",
        "@opam//pkg:ppx_compare.runtime-lib",
        "@opam//pkg:ppx_inline_test.runtime-lib",
        "@opam//pkg:ppx_bench.runtime-lib",
        "@opam//pkg:ppx_enumerate.runtime-lib",
        "@opam//pkg:ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx:Driver",
    opts = GLOBAL_PPX_EXECUTABLE_OPTS + REPO_PPX_EXECUTABLE_OPTS + PKG_PPX_EXECUTABLE_OPTS,
    visibility = [
        "//bench:__pkg__",
    ],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:ppx_jane",
        "@opam//pkg:ppx_bench",
    ],
)
