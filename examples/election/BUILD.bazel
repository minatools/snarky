load(
    "@obazl_rules_ocaml//ocaml:build.bzl",
    "ocaml_archive",
    "ocaml_executable",
    "ocaml_interface",
    "ocaml_module",
    "ocaml_ns_module",
)

COMMON_OPTS = select({
    "//bzl/config:enable_verbose": ["-verbose"],
    "//conditions:default": [],
}) + ["-warn-error",  "-27-26-32-33", "-thread"]

LINK_OPTS = select({
    "//bzl/config:always_link": ["-linkall"],
    "//conditions:default": [],
}) + []

EXEC_OPTS = COMMON_OPTS + LINK_OPTS + []
IMPL_OPTS = COMMON_OPTS + LINK_OPTS + []
INTF_OPTS = COMMON_OPTS + LINK_OPTS + []
ARCHIVE_OPTS = COMMON_OPTS + LINK_OPTS + []
COMMON_DEPS = []

## (pps ppx_jane ppx_deriving.enum))
PPX = "@//ppx/exe:ppx2_jane_enum"
PPX_ARGS = [
    # do not sort (buildifier)
    "-cookie",
    "library-name=\"election\"",
    "-corrected-suffix",
    ".ppx-corrected"
]

ocaml_executable(
    name = "election",
    opts = IMPL_OPTS + ["-ccopt", "-lstdc++"],
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:core_kernel",
        "//src:snarky",
        ":impl.cm_",
        ":knapsack_hash.cm_",
        ":import.cm_",
        ":election.cm_",
        ":election_main.cm_",
    ],
)

ocaml_module(
    name = "election.cm_",
    impl = "election.ml",
    opts = IMPL_OPTS,
    ppx = PPX,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "//src:snarky",
        ":impl.cm_",
        ":import.cm_",
        ":knapsack_hash.cm_"
    ],
)

ocaml_module(
    name = "election_main.cm_",
    impl = "election_main.ml",
    opts = IMPL_OPTS,
    ppx = PPX,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "//src:snarky",
        ":election.cm_",
        ":impl.cm_"
    ],
)

ocaml_module(
    name = "impl.cm_",
    impl = "impl.ml",
    opts = IMPL_OPTS,
    ppx = PPX,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "//src:snarky",
        "//src/base:snarky_backendless",
        "//src/camlsnark_c/libsnark_bindings:snarky_libsnark_bindings",
        "//src/intf:snarky_intf",
    ],
)

ocaml_module(
    name = "import.cm_",
    impl = "import.ml",
    opts = IMPL_OPTS,
    ppx = PPX,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "//src:snarky",
        ":impl.cm_",
        ":knapsack_hash.cm_"
    ],
)

ocaml_interface(
    name = "knapsack_hash.cmi",
    intf = "knapsack_hash.mli",
    # ns_module = ":election_ns_module",
    ppx = PPX,
    ppx_args = PPX_ARGS,
    opts = INTF_OPTS,
    deps = [
        # do not sort (buildifier)
        ":impl.cm_",
    ],
)

ocaml_module(
    name = "knapsack_hash.cm_",
    impl = "knapsack_hash.ml",
    intf = ":knapsack_hash.cmi",
    opts = IMPL_OPTS,
    ppx = PPX,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "//src:snarky",
        "//src/base:snarky_backendless",
        ":impl.cm_",
    ],
)
