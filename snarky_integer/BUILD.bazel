load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_signature",
    "ocaml_module",
    "ocaml_ns_archive",
)

################################################################
SNARKY_INTEGER_DEPS = ["@snarky//src/base:snarky_backendless"]

SNARKY_INTEGER_DEPS_OPAM = ["core_kernel", "bignum"]

SNARKY_INTEGER_PPX = "@//bzl/ppx/exe:ppx_jane__ppx_deriving.eq"

SNARKY_INTEGER_PPX_ARGS = [
    # do not sort (buildifier)
    "-inline-test-lib",
    "snarky_integer",
]

#################
ocaml_ns_archive(
    name = "snarky_integer",
    submodules = [
         ":_Integer",
         ":_Util"
    ],
    visibility = ["//visibility:public"]
)

#############
ocaml_module(
    name = "_Integer",
    struct = "integer.ml",
    sig    = ":_Integer.cmi",
    ppx = SNARKY_INTEGER_PPX,
    ppx_args = SNARKY_INTEGER_PPX_ARGS,
    deps = SNARKY_INTEGER_DEPS + [
        # do not sort (buildifier)
        ":_Util",
    ],
    deps_opam = SNARKY_INTEGER_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Integer.cmi",
    src = "integer.mli",
    ppx = SNARKY_INTEGER_PPX,
    ppx_args = SNARKY_INTEGER_PPX_ARGS,
    deps = SNARKY_INTEGER_DEPS,
    deps_opam = SNARKY_INTEGER_DEPS_OPAM
)

#############
ocaml_module(
    name   = "_Util",
    struct = "util.ml",
    ppx = SNARKY_INTEGER_PPX,
    ppx_args = SNARKY_INTEGER_PPX_ARGS,
    deps = SNARKY_INTEGER_DEPS,
    deps_opam = SNARKY_INTEGER_DEPS_OPAM
)
