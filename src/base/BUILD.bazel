## OBAZL GENERATED FILE ## To retain edits (prevent overwrite), delete this line.
## Bazel package: @snarky//src/lib/baze58_check
## Dune file: /Users/gar/mina/snarky/src/base/dune

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_interface",
    "ocaml_module",
    "ocaml_ns_module",
)

## Global Options
load(
    "//bzl:config.bzl",
    "ARCHIVE_OPTS",
    "GLOBAL_CLI_OPTS",
    "INTERFACE_OPTS",
    "MODULE_OPTS",
    "NS_MODULE_OPTS",
)

## Repo Options
load("//bzl/snarky:config.bzl", "SNARKY_OPTS")

PKG_OPTS = GLOBAL_CLI_OPTS + SNARKY_OPTS + []

LIB_1_OPTS = []

LIB_1_ARCHIVE_OPTS = PKG_OPTS + LIB_1_OPTS + ARCHIVE_OPTS

LIB_1_INTERFACE_OPTS = PKG_OPTS + LIB_1_OPTS + INTERFACE_OPTS

LIB_1_MODULE_OPTS = PKG_OPTS + LIB_1_OPTS + MODULE_OPTS

LIB_1_NS_MODULE_OPTS = PKG_OPTS + LIB_1_OPTS + NS_MODULE_OPTS

LIB_1_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:core_kernel",
    "@snarky//bitstring_lib",
    "@snarky//h_list",
    "@snarky//interval_union",
    "@snarky//src/intf:snarky_intf",
]

PPX_1 = "//bzl/ppx:ppx[ppx_sexp_conv][ppx_bin_prot][ppx_let][ppx_hash][ppx_compare][ppx_deriving.enum][ppx_assert][ppx_deriving.eq][ppx_snarky][ppx_fields_conv][ppx_inline_test][ppx_custom_printf]"

PPX_1_ARGS = [
    # do not sort (buildifier)
    "-inline-test-lib",
    "snarky_backendless",
    "-cookie",
    "library=\"snarky_backendless\"",
]

################################################################
## LIB 1
################################################################
ocaml_archive(
    name = "snarky_backendless",
    opts = LIB_1_ARCHIVE_OPTS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Snarky_backendless_ns",
        ":As_prover",
        ":As_prover0",
        ":As_prover_intf",
        ":Backend_extended",
        ":Backend_intf",
        ":Bin_prot_io",
        ":Boolean",
        ":Checked",
        ":Checked_intf",
        ":Checked_runner",
        ":Constraint",
        ":Constraint_system",
        ":Cvar",
        ":Enumerable",
        ":Enumerable_intf",
        ":Free_monad",
        ":Handle",
        ":Knapsack",
        ":Lens",
        ":Merkle_tree",
        ":Monad_let",
        ":Monad_sequence",
        ":Number",
        ":Number_intf",
        ":Pedersen",
        ":Request",
        ":Restrict_monad",
        ":Run_state",
        ":Snark",
        ":Snark0",
        ":Snark_intf",
        ":Snarky_backendless",
        ":Traversable",
        ":Typ",
        ":Typ_monads",
        ":Types",
    ],
)

ocaml_ns_module(
    name = "Snarky_backendless_ns",
    ns = "snarky_backendless",
    opts = LIB_1_NS_MODULE_OPTS,
    submodules = [
        # do not sort (buildifier)
        "as_prover.ml",
        "as_prover0.ml",
        "as_prover_intf.ml",
        "backend_extended.ml",
        "backend_intf.ml",
        "bin_prot_io.ml",
        "boolean.ml",
        "checked.ml",
        "checked_intf.ml",
        "checked_runner.ml",
        "constraint.ml",
        "constraint_system.ml",
        "cvar.ml",
        "enumerable.ml",
        "enumerable_intf.ml",
        "free_monad.ml",
        "handle.ml",
        "knapsack.ml",
        "lens.ml",
        "merkle_tree.ml",
        "monad_let.ml",
        "monad_sequence.ml",
        "number.ml",
        "number_intf.ml",
        "pedersen.ml",
        "request.ml",
        "restrict_monad.ml",
        "run_state.ml",
        "snark.ml",
        "snark0.ml",
        "snark_intf.ml",
        "snarky_backendless.ml",
        "traversable.ml",
        "typ.ml",
        "typ_monads.ml",
        "types.ml",
    ],
)

ocaml_module(
    name = "As_prover",
    src = "as_prover.ml",
    intf = "_As_prover",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":As_prover0",
        ":As_prover_intf",
        ":Checked",
        ":Checked_intf",
        ":Typ_monads",
    ],
)

ocaml_interface(
    name = "_As_prover",
    src = "as_prover.mli",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:private"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":As_prover_intf",
        ":Checked",
        ":Checked_intf",
    ],
)

ocaml_module(
    name = "As_prover0",
    src = "as_prover0.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Handle",
        ":Lens",
        ":Monad_let",
        ":Request",
        ":Typ_monads",
        ":Types",
    ],
)

ocaml_module(
    name = "As_prover_intf",
    src = "as_prover_intf.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Cvar",
        ":Handle",
        ":Lens",
        ":Monad_let",
        ":Request",
        ":Typ_monads",
        ":Types",
    ],
)

ocaml_module(
    name = "Backend_extended",
    src = "backend_extended.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Backend_intf",
        ":Constraint",
        ":Cvar",
    ],
)

ocaml_module(
    name = "Backend_intf",
    src = "backend_intf.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Constraint",
        ":Cvar",
    ],
)

ocaml_module(
    name = "Bin_prot_io",
    src = "bin_prot_io.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
    ],
)

ocaml_module(
    name = "Boolean",
    src = "boolean.ml",
    intf = "_Boolean",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
)

ocaml_interface(
    name = "_Boolean",
    src = "boolean.mli",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "Checked",
    src = "checked.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":As_prover0",
        ":As_prover_intf",
        ":Checked_intf",
        ":Constraint",
        ":Cvar",
        ":Handle",
        ":Lens",
        ":Monad_let",
        ":Request",
        ":Run_state",
        ":Typ_monads",
        ":Types",
    ],
)

ocaml_module(
    name = "Checked_intf",
    src = "checked_intf.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Constraint",
        ":Cvar",
        ":Handle",
        ":Lens",
        ":Monad_let",
        ":Request",
        ":Run_state",
        ":Types",
    ],
)

ocaml_module(
    name = "Checked_runner",
    src = "checked_runner.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":As_prover",
        ":As_prover_intf",
        ":Backend_extended",
        ":Checked",
        ":Checked_intf",
        ":Constraint",
        ":Constraint_system",
        ":Cvar",
        ":Handle",
        ":Lens",
        ":Monad_let",
        ":Request",
        ":Run_state",
        ":Typ_monads",
        ":Types",
    ],
)

ocaml_module(
    name = "Constraint",
    src = "constraint.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
    ],
)

ocaml_module(
    name = "Constraint_system",
    src = "constraint_system.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Backend_intf",
    ],
)

ocaml_module(
    name = "Cvar",
    src = "cvar.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
    ],
)

ocaml_module(
    name = "Enumerable",
    src = "enumerable.ml",
    intf = "_Enumerable",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Boolean",
        ":Checked",
        ":Constraint",
        ":Snark_intf",
        ":Typ",
    ],
)

ocaml_interface(
    name = "_Enumerable",
    src = "enumerable.mli",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:private"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Enumerable_intf",
        ":Snark_intf",
    ],
)

ocaml_module(
    name = "Enumerable_intf",
    src = "enumerable_intf.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
)

ocaml_module(
    name = "Free_monad",
    src = "free_monad.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Monad_let",
    ],
)

ocaml_module(
    name = "Handle",
    src = "handle.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
)

ocaml_module(
    name = "Knapsack",
    src = "knapsack.ml",
    intf = "_Knapsack",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Boolean",
        ":Checked",
        ":Snark_intf",
        ":Typ",
    ],
)

ocaml_interface(
    name = "_Knapsack",
    src = "knapsack.mli",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:private"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Boolean",
        ":Checked",
        ":Snark_intf",
        ":Typ",
    ],
)

ocaml_module(
    name = "Lens",
    src = "lens.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
)

ocaml_module(
    name = "Merkle_tree",
    src = "merkle_tree.ml",
    intf = "_Merkle_tree",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Boolean",
        ":Lens",
        ":Request",
        ":Snark_intf",
        ":Typ",
    ],
)

ocaml_interface(
    name = "_Merkle_tree",
    src = "merkle_tree.mli",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:private"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Boolean",
        ":Checked",
        ":Lens",
        ":Request",
        ":Snark_intf",
        ":Typ",
    ],
)

ocaml_module(
    name = "Monad_let",
    src = "monad_let.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
    ],
)

ocaml_module(
    name = "Monad_sequence",
    src = "monad_sequence.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Monad_let",
    ],
)

ocaml_module(
    name = "Number",
    src = "number.ml",
    intf = "_Number",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Boolean",
        ":Snark_intf",
    ],
)

ocaml_interface(
    name = "_Number",
    src = "number.mli",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:private"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Number_intf",
        ":Snark_intf",
    ],
)

ocaml_module(
    name = "Number_intf",
    src = "number_intf.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
)

ocaml_module(
    name = "Pedersen",
    src = "pedersen.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Boolean",
        ":Checked",
        ":Snark_intf",
        ":Typ",
    ],
)

ocaml_module(
    name = "Request",
    src = "request.ml",
    intf = "_Request",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
    ],
)

ocaml_interface(
    name = "_Request",
    src = "request.mli",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:private"],
)

ocaml_module(
    name = "Restrict_monad",
    src = "restrict_monad.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Monad_let",
    ],
)

ocaml_module(
    name = "Run_state",
    src = "run_state.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Constraint",
        ":Constraint_system",
        ":Cvar",
        ":Request",
    ],
)

ocaml_module(
    name = "Snark",
    src = "snark.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Backend_intf",
        ":Knapsack",
        ":Merkle_tree",
        ":Snark0",
    ],
)

ocaml_module(
    name = "Snark0",
    src = "snark0.ml",
    intf = "_Snark0",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    ppx_output_format = "text",
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":As_prover",
        ":As_prover0",
        ":As_prover_intf",
        ":Backend_extended",
        ":Backend_intf",
        ":Bin_prot_io",
        ":Boolean",
        ":Checked",
        ":Checked_intf",
        ":Checked_runner",
        ":Constraint",
        ":Constraint_system",
        ":Cvar",
        ":Enumerable",
        ":Handle",
        ":Monad_sequence",
        ":Number",
        ":Request",
        ":Restrict_monad",
        ":Run_state",
        ":Snark_intf",
        ":Typ",
        ":Typ_monads",
        ":Types",
    ],
)

ocaml_interface(
    name = "_Snark0",
    src = "snark0.mli",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_INTERFACE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:private"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Backend_intf",
        ":Snark_intf",
    ],
)

ocaml_module(
    name = "Snark_intf",
    src = "snark_intf.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":As_prover",
        ":Boolean",
        ":Checked",
        ":Constraint",
        ":Cvar",
        ":Enumerable_intf",
        ":Lens",
        ":Monad_let",
        ":Monad_sequence",
        ":Number_intf",
        ":Request",
        ":Run_state",
        ":Traversable",
        ":Typ",
        ":Typ_monads",
        ":Types",
    ],
)

ocaml_module(
    name = "Snarky_backendless",
    src = "snarky_backendless.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":As_prover",
        ":As_prover0",
        ":As_prover_intf",
        ":Backend_extended",
        ":Backend_intf",
        ":Bin_prot_io",
        ":Boolean",
        ":Checked",
        ":Checked_intf",
        ":Checked_runner",
        ":Constraint",
        ":Constraint_system",
        ":Cvar",
        ":Enumerable",
        ":Enumerable_intf",
        ":Free_monad",
        ":Handle",
        ":Knapsack",
        ":Lens",
        ":Merkle_tree",
        ":Monad_let",
        ":Monad_sequence",
        ":Number",
        ":Number_intf",
        ":Pedersen",
        ":Request",
        ":Restrict_monad",
        ":Run_state",
        ":Snark",
        ":Snark0",
        ":Snark_intf",
        ":Traversable",
        ":Typ",
        ":Typ_monads",
        ":Types",
    ],
)

ocaml_module(
    name = "Traversable",
    src = "traversable.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
    ],
)

ocaml_module(
    name = "Typ",
    src = "typ.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":As_prover",
        ":As_prover_intf",
        ":Checked",
        ":Checked_intf",
        ":Cvar",
        ":Restrict_monad",
        ":Traversable",
        ":Typ_monads",
        ":Types",
    ],
)

ocaml_module(
    name = "Typ_monads",
    src = "typ_monads.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Cvar",
        ":Free_monad",
    ],
)

ocaml_module(
    name = "Types",
    src = "types.ml",
    ns_module = ":Snarky_backendless_ns",
    opts = LIB_1_MODULE_OPTS,
    ppx = PPX_1,
    ppx_args = PPX_1_ARGS,
    visibility = ["//visibility:public"],
    deps = LIB_1_DEPS + [
        # do not sort (buildifier)
        ":Constraint",
        ":Cvar",
        ":Handle",
        ":Request",
        ":Run_state",
        ":Typ_monads",
    ],
)
