load(
    "@obazl_rules_ocaml//ocaml:build.bzl",
    "ocaml_archive",
    "ocaml_executable",
    "ocaml_interface",
    "ocaml_library",
    "ocaml_module",
    "ocaml_ns_module",
)

COMMON_OPTS = select({
    "//bzl/config:enable_verbose": ["-verbose"],
    "//conditions:default": [],
}) + ["-thread"]

LINK_OPTS = select({
    "//bzl/config:always_link": ["-linkall"],
    "//conditions:default": [],
}) + []

IMPL_OPTS = COMMON_OPTS + LINK_OPTS + []
INTF_OPTS = COMMON_OPTS + LINK_OPTS + []
ARCHIVE_OPTS = COMMON_OPTS + LINK_OPTS + ["-thread"]
COMMON_DEPS = []

SNARKY_BACKENDLESS_NS = "Snarky_backendless"

## (ppx_sexp_conv ppx_bin_prot ppx_let ppx_hash ppx_compare ppx_deriving.enum ppx_assert ppx_deriving.eq ppx_snarky ppx_fields_conv ppx_inline_test ppx_custom_printf)
PPX12_B61C7A4 = "//ppx/exe:ppx12_b61c7a40-06e3-5466-8b7b-b3535f5a4aa6"
PPX_ARGS = [
    # do not sort (buildifier)
    "-cookie",
    "library-name=\"snarky_backendless\"",
    "-corrected-suffix",
    ".ppx-corrected",
]

ocaml_archive(
    name = "snarky_backendless",
    opts = ARCHIVE_OPTS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:bisect_ppx.runtime",
        "//tuple_lib",
        "//bitstring_lib",
        "//interval_union",
        ":snarky_backendless_ns_module",
        ":as_prover0.cm_",
        ":lens.cm_",
        ":cvar.cm_",
        ":run_state.cm_",
        ":restrict_monad.cm_",
        ":constraint_system.cm_",
        ":request.cm_",
        ":handle.cm_",
        ":number.cm_",
        ":monad_sequence.cm_",
        ":constraint.cm_",
        ":pedersen.cm_",
        ":knapsack.cm_",
        ":backend_extended.cm_",
        ":traversable.cm_",
        ":bin_prot_io.cm_",
        ":as_prover_intf.cm_",
        ":types.cm_",
        ":checked_intf.cm_",
        ":monad_let.cm_",
        ":free_monad.cm_",
        ":typ_monads.cm_",
        ":checked.cm_",
        ":as_prover.cm_",
        ":checked_runner.cm_",
        ":typ.cm_",
        ":number_intf.cm_",
        ":boolean.cm_",
        ":enumerable.cm_",
        ":enumerable_intf.cm_",
        ":snark0.cm_",
        ":snark.cm_",
        ":snark_intf.cm_",
        ":merkle_tree.cm_",
        ":backend_intf.cm_",
        ":snarky_backendless.cm_",
    ],
)

ocaml_ns_module(
    name = "snarky_backendless_ns_module",
    ns = SNARKY_BACKENDLESS_NS,
    submodules = [
        # do not sort (buildifier)
        "as_prover0.ml",
        "cvar.ml",
        "checked.ml",
        "restrict_monad.ml",
        "constraint_system.ml",
        "request.ml",
        "handle.ml",
        "number.ml",
        "monad_sequence.ml",
        "constraint.ml",
        "run_state.ml",
        "snark0.ml",
        "pedersen.ml",
        "knapsack.ml",
        "free_monad.ml",
        "backend_extended.ml",
        "traversable.ml",
        "bin_prot_io.ml",
        "as_prover_intf.ml",
        "snark.ml",
        "typ_monads.ml",
        "types.ml",
        "checked_intf.ml",
        "as_prover.ml",
        "monad_let.ml",
        "lens.ml",
        "checked_runner.ml",
        "number_intf.ml",
        "typ.ml",
        "boolean.ml",
        "snark_intf.ml",
        "enumerable.ml",
        "enumerable_intf.ml",
        "merkle_tree.ml",
        "backend_intf.ml",
        "snarky_backendless.ml",
    ],
)

################################################################
ocaml_module(
    name = "as_prover0.cm_",
    impl = "as_prover0.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:core_kernel",
        ":lens.cm_",
        ":types.cm_",
    ],
)

ocaml_module(
    name = "as_prover_intf.cm_",
    impl = "as_prover_intf.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        ":cvar.cm_",
        ":lens.cm_",
        ":monad_let.cm_",
        ":types.cm_",
    ],
)

ocaml_interface(
    name = "as_prover.cmi",
    intf = "as_prover.mli",
    ns_module = ":snarky_backendless_ns_module",
    opts = INTF_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    deps = [
        # do not sort (buildifier)
        ":as_prover0.cm_",
        ":as_prover_intf.cm_",
        ":checked.cm_",
        ":checked_intf.cm_",
    ],
)

ocaml_module(
    name = "as_prover.cm_",
    cmi = ":as_prover.cmi",
    impl = "as_prover.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:core_kernel",
        ":as_prover0.cm_",
        ":checked.cm_",
    ],
)

################################################################
ocaml_module(
    name = "backend_extended.cm_",
    impl = "backend_extended.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "//src/intf:snarky_intf",
        ":backend_intf.cm_",
        ":constraint.cm_",
        ":cvar.cm_",
    ],
)

ocaml_module(
    name = "backend_intf.cm_",
    impl = "backend_intf.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "//src/intf:snarky_intf",
        ":constraint.cm_",
        ":cvar.cm_",
    ],
)

ocaml_module(
    name = "bin_prot_io.cm_",
    impl = "bin_prot_io.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
         "@opam//pkg:core_kernel",
   ],
)

ocaml_interface(
    name = "boolean.cmi",
    intf = "boolean.mli",
    ns_module = ":snarky_backendless_ns_module",
    opts = INTF_OPTS,
)

ocaml_module(
    name = "boolean.cm_",
    cmi = ":boolean.cmi",
    impl = "boolean.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
)

ocaml_module(
    name = "checked.cm_",
    impl = "checked.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:core_kernel",
        ":as_prover0.cm_",
        ":as_prover_intf.cm_",
        ":checked_intf.cm_",
        ":types.cm_",
    ],
)

ocaml_module(
    name = "checked_intf.cm_",
    impl = "checked_intf.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        ":lens.cm_",
        ":types.cm_",
    ],
)

ocaml_module(
    name = "checked_runner.cm_",
    impl = "checked_runner.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:core_kernel",
        ":as_prover.cm_",
        ":backend_extended.cm_",
        ":checked_intf.cm_",
        ":types.cm_",
    ],
)

ocaml_module(
    name = "constraint.cm_",
    impl = "constraint.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "//src/intf:snarky_intf"
    ],
)

ocaml_module(
    name = "constraint_system.cm_",
    impl = "constraint_system.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        ":backend_intf.cm_",
    ],
)

ocaml_module(
    name = "cvar.cm_",
    impl = "cvar.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:core_kernel",
        "//src/intf:snarky_intf"
    ],
)

ocaml_interface(
    name = "enumerable.cmi",
    intf = "enumerable.mli",
    ns_module = ":snarky_backendless_ns_module",
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    opts = INTF_OPTS,
    deps = [
        # do not sort (buildifier)
        ":enumerable_intf.cm_",
        ":snark_intf.cm_",
    ],
)

ocaml_module(
    name = "enumerable.cm_",
    cmi = ":enumerable.cmi",
    impl = "enumerable.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        ":boolean.cm_",
        ":checked.cm_",
        ":constraint.cm_",
        ":snark_intf.cm_",
        ":typ.cm_",
    ],
)

ocaml_module(
    name = "enumerable_intf.cm_",
    impl = "enumerable_intf.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
)

ocaml_module(
    name = "free_monad.cm_",
    impl = "free_monad.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        ":monad_let.cm_",
    ],
)

ocaml_module(
    name = "handle.cm_",
    impl = "handle.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
)

ocaml_interface(
    name = "knapsack.cmi",
    intf = "knapsack.mli",
    ns_module = ":snarky_backendless_ns_module",
    opts = INTF_OPTS,
    deps = [
        # do not sort (buildifier)
        ":boolean.cm_",
        ":checked.cm_",
        ":snark_intf.cm_",
        ":typ.cm_",
    ],
)

ocaml_module(
    name = "knapsack.cm_",
    cmi = ":knapsack.cmi",
    impl = "knapsack.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        ":boolean.cm_",
        ":checked.cm_",
        ":snark_intf.cm_",
        ":typ.cm_",
    ],
)

ocaml_module(
    name = "lens.cm_",
    impl = "lens.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
)

ocaml_interface(
    name = "merkle_tree.cmi",
    intf = "merkle_tree.mli",
    ns_module = ":snarky_backendless_ns_module",
    opts = INTF_OPTS,
    deps = [
        # do not sort (buildifier)
        ":snark_intf.cm_",
    ],
)

ocaml_module(
    name = "merkle_tree.cm_",
    cmi = ":merkle_tree.cmi",
    impl = "merkle_tree.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:core_kernel",
        ":snark_intf.cm_",
    ],
)

ocaml_module(
    name = "monad_let.cm_",
    impl = "monad_let.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:core_kernel",
    ],
)

ocaml_module(
    name = "monad_sequence.cm_",
    impl = "monad_sequence.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        ":monad_let.cm_",
    ],
)

ocaml_interface(
    name = "number.cmi",
    intf = "number.mli",
    ns_module = ":snarky_backendless_ns_module",
    opts = INTF_OPTS,
    deps = [
        # do not sort (buildifier)
        ":number_intf.cm_",
        ":snark_intf.cm_",
    ],
)

ocaml_module(
    name = "number.cm_",
    cmi = ":number.cmi",
    impl = "number.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        ":boolean.cm_",
        ":snark_intf.cm_",
    ],
)

ocaml_module(
    name = "number_intf.cm_",
    impl = "number_intf.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
)

ocaml_module(
    name = "pedersen.cm_",
    impl = "pedersen.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "//bitstring_lib",
        "//interval_union",
        "//tuple_lib",
        ":snark_intf.cm_",
    ],
)

ocaml_interface(
    name = "request.cmi",
    intf = "request.mli",
    ns_module = ":snarky_backendless_ns_module",
    opts = INTF_OPTS,
)

ocaml_module(
    name = "request.cm_",
    cmi = ":request.cmi",
    impl = "request.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:core_kernel",
    ],
)

ocaml_module(
    name = "restrict_monad.cm_",
    impl = "restrict_monad.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        ":monad_let.cm_",
    ],
)

ocaml_module(
    name = "run_state.cm_",
    impl = "run_state.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:core_kernel",
        "//src/intf:snarky_intf",
        ":constraint_system.cm_",
        ":request.cm_",
    ],
)

ocaml_interface(
    name = "snark0.cmi",
    intf = "snark0.mli",
    ns_module = ":snarky_backendless_ns_module",
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    opts = INTF_OPTS,
    deps = [
        # do not sort (buildifier)
        "//src/intf:snarky_intf",
        ":snark_intf.cm_",
        ":backend_intf.cm_",
    ],
)

ocaml_module(
    name = "snark0.cm_",
    cmi = ":snark0.cmi",
    impl = "snark0.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:core_kernel",
        "//bitstring_lib",
        "//h_list",
        ":bin_prot_io.cm_",
        ":checked_runner.cm_",
        ":enumerable.cm_",
        ":number.cm_",
    ],
)

ocaml_module(
    name = "snark.cm_",
    impl = "snark.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        ":snark0.cm_",
    ],
)

ocaml_module(
    name = "snark_intf.cm_",
    impl = "snark_intf.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "//bitstring_lib",
        "//h_list",
        "//src/intf:snarky_intf",
        ":boolean.cm_",
        ":enumerable_intf.cm_",
        ":monad_sequence.cm_",
        ":number_intf.cm_",
        ":typ.cm_",
    ],
)

ocaml_module(
    name = "snarky_backendless.cm_",
    impl = "snarky_backendless.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "//src/intf:snarky_intf",
        "//h_list",
    ],
)

ocaml_module(
    name = "traversable.cm_",
    impl = "traversable.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
         "@opam//pkg:core_kernel",
   ],
)

ocaml_module(
    name = "typ.cm_",
    impl = "typ.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:core_kernel",
        "//h_list",
        ":as_prover.cm_",
        ":as_prover_intf.cm_",
        ":checked_intf.cm_",
        ":restrict_monad.cm_",
        ":traversable.cm_",
        ":types.cm_",
    ],
)

ocaml_module(
    name = "typ_monads.cm_",
    impl = "typ_monads.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        ":cvar.cm_",
        ":free_monad.cm_",
    ],
)

ocaml_module(
    name = "types.cm_",
    impl = "types.ml",
    ns_module = ":snarky_backendless_ns_module",
    opts = IMPL_OPTS,
    ppx_exe = PPX12_B61C7A4,
    ppx_args = PPX_ARGS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        # ":constraint.cm_",
        ":cvar.cm_",
        ":handle.cm_",
        ":run_state.cm_",
        ":typ_monads.cm_",
    ],
)

