load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_signature",
    "ocaml_module",
    "ocaml_ns_archive",
    "ppx_executable",
)

## FIXME: backend_intf is broken if ppx print is text
PPX_PRINT = "@ppx//print:binary"

################################################################
## STANZA 1: LIBRARY SNARKY_BACKENDLESS
################################################################
SNARKY_BACKENDLESS_SIGNATURE_OPTS = []

SNARKY_BACKENDLESS_MODULE_OPTS = []

SNARKY_BACKENDLESS_PPX_EXECUTABLE_OPTS = []

 # (libraries bitstring_lib core_kernel h_list interval_union snarky_intf)

SNARKY_BACKENDLESS_DEPS = [
    # "//bitstring_lib",
    # "//h_list",
    # "//interval_union",
    # "//src/intf:snarky_intf",
]

SNARKY_BACKENDLESS_DEPS_OPAM = ["core_kernel"]

#################
ocaml_ns_archive(
    name = "snarky_backendless",
    submodules = [
        ":_As_prover",
        ":_As_prover0",
        ":_As_prover_intf",
        ":_Backend_extended",
        ":_Backend_intf",
        ":_Bin_prot_io",
        ":_Boolean",
        ":_Checked",
        ":_Checked_intf",
        ":_Checked_runner",
        ":_Constraint",
        ":_Constraint_system",
        ":_Cvar",
        ":_Enumerable",
        ":_Enumerable_intf",
        ":_Free_monad",
        ":_Handle",
        ":_Knapsack",
        ":_Lens",
        ":_Merkle_tree",
        ":_Monad_let",
        ":_Monad_sequence",
        ":_Number",
        ":_Number_intf",
        ":_Pedersen",
        ":_Request",
        ":_Restrict_monad",
        ":_Run_state",
        ":_Snark",
        ":_Snark0",
        ":_Snark_intf",
        ":_Snarky_backendless",
        ":_Traversable",
        ":_Typ",
        ":_Typ_monads",
        ":_Types",
    ],
    visibility = ["//visibility:public"],
)

#############
ocaml_module(
    name = "_As_prover",
    struct = "as_prover.ml",
    sig  = ":_As_prover.cmi",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_As_prover0",
        ":_As_prover_intf",
        ":_Checked",
        ":_Checked_intf",
        ":_Typ_monads",
    ],
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM
)

ocaml_signature(
    name = "_As_prover.cmi",
    src = "as_prover.mli",
    opts = SNARKY_BACKENDLESS_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_As_prover_intf",
        ":_Checked",
        ":_Checked_intf",
    ],
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_As_prover0",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "as_prover0.ml",
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Handle",
        ":_Lens",
        ":_Monad_let",
        ":_Request",
        ":_Typ_monads",
        ":_Types",
    ],
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM
)

ocaml_module(
    name = "_As_prover_intf",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "as_prover_intf.ml",
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Cvar",
        ":_Handle",
        ":_Lens",
        ":_Monad_let",
        ":_Request",
        ":_Typ_monads",
        ":_Types",
    ],
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Backend_extended",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "backend_extended.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM, #  + ["bignum.bigint"],
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Backend_intf",
        ":_Constraint",
        ":_Cvar",
    ],
)

#############
ocaml_module(
    name = "_Backend_intf",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    ppx_print = PPX_PRINT,
    struct = "backend_intf.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Constraint",
        ":_Cvar",
    ],
)

#############
ocaml_module(
    name = "_Bin_prot_io",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "bin_prot_io.ml",
    deps = SNARKY_BACKENDLESS_DEPS,
	deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Boolean",
    sig  = ":_Boolean.cmi",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "boolean.ml",
    deps = SNARKY_BACKENDLESS_DEPS,
	deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
)

################
ocaml_signature(
    name = "_Boolean.cmi",
    src = "boolean.mli",
    opts = SNARKY_BACKENDLESS_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    deps = SNARKY_BACKENDLESS_DEPS,
	deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Checked",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "checked.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_As_prover0",
        ":_As_prover_intf",
        ":_Checked_intf",
        ":_Constraint",
        ":_Cvar",
        ":_Handle",
        ":_Lens",
        ":_Monad_let",
        ":_Request",
        ":_Run_state",
        ":_Typ_monads",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Checked_intf",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "checked_intf.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Constraint",
        ":_Cvar",
        ":_Handle",
        ":_Lens",
        ":_Monad_let",
        ":_Request",
        ":_Run_state",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Checked_runner",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "checked_runner.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_As_prover",
        ":_As_prover_intf",
        ":_Backend_extended",
        ":_Checked",
        ":_Checked_intf",
        ":_Constraint",
        ":_Constraint_system",
        ":_Cvar",
        ":_Handle",
        ":_Lens",
        ":_Monad_let",
        ":_Request",
        ":_Run_state",
        ":_Typ_monads",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Constraint",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "constraint.ml",
    deps = SNARKY_BACKENDLESS_DEPS + [
        "//src/intf:snarky_intf",
    ],
	deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Constraint_system",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "constraint_system.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Backend_intf",
    ],
)

#############
ocaml_module(
    name = "_Cvar",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "cvar.ml",
    deps = SNARKY_BACKENDLESS_DEPS + [
        "//src/intf:snarky_intf",
    ],
	deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Enumerable",
    sig  = ":_Enumerable.cmi",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "enumerable.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Boolean",
        ":_Checked",
        ":_Constraint",
        ":_Snark_intf",
        ":_Typ",
    ],
)

################
ocaml_signature(
    name = "_Enumerable.cmi",
    src = "enumerable.mli",
    opts = SNARKY_BACKENDLESS_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Enumerable_intf",
        ":_Snark_intf",
    ],
)

#############
ocaml_module(
    name = "_Enumerable_intf",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "enumerable_intf.ml",
    deps = SNARKY_BACKENDLESS_DEPS,
	deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Free_monad",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "free_monad.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Monad_let",
    ],
)

#############
ocaml_module(
    name = "_Handle",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "handle.ml",
    deps = SNARKY_BACKENDLESS_DEPS,
	deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Knapsack",
    sig  = ":_Knapsack.cmi",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "knapsack.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Boolean",
        ":_Checked",
        ":_Snark_intf",
        ":_Typ",
    ],
)

################
ocaml_signature(
    name = "_Knapsack.cmi",
    src = "knapsack.mli",
    opts = SNARKY_BACKENDLESS_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Boolean",
        ":_Checked",
        ":_Snark_intf",
        ":_Typ",
    ],
)

#############
ocaml_module(
    name = "_Lens",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "lens.ml",
    deps = SNARKY_BACKENDLESS_DEPS,
	deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Merkle_tree",
    sig  = ":_Merkle_tree.cmi",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    ppx_print = "@ppx//print:text",
    struct = "merkle_tree.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Boolean",
        ":_Lens",
        ":_Request",
        ":_Snark_intf",
        ":_Typ",
    ],
)

################
ocaml_signature(
    name = "_Merkle_tree.cmi",
    src = "merkle_tree.mli",
    opts = SNARKY_BACKENDLESS_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Boolean",
        ":_Checked",
        ":_Lens",
        ":_Request",
        ":_Snark_intf",
        ":_Typ",
    ],
)

#############
ocaml_module(
    name = "_Monad_let",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "monad_let.ml",
    deps = SNARKY_BACKENDLESS_DEPS,
	deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Monad_sequence",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "monad_sequence.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Monad_let",
    ],
)

#############
ocaml_module(
    name = "_Number",
    sig  = ":_Number.cmi",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "number.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM, # + ["bignum.bigint"],
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Boolean",
        ":_Snark_intf",
    ],
)

ocaml_signature(
    name = "_Number.cmi",
    src = "number.mli",
    opts = SNARKY_BACKENDLESS_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Number_intf",
        ":_Snark_intf",
    ],
)

#############
ocaml_module(
    name = "_Number_intf",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "number_intf.ml",
    deps = SNARKY_BACKENDLESS_DEPS,
	deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Pedersen",
    struct = "pedersen.ml",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        "//interval_union",
        ":_Boolean",
        ":_Checked",
        ":_Snark_intf",
        ":_Typ",
    ],
)

#############
ocaml_module(
    name = "_Request",
    sig  = ":_Request.cmi",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "request.ml",
    deps = SNARKY_BACKENDLESS_DEPS,
	deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
)

################
ocaml_signature(
    name = "_Request.cmi",
    src = "request.mli",
    opts = SNARKY_BACKENDLESS_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    deps = SNARKY_BACKENDLESS_DEPS,
	deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Restrict_monad",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "restrict_monad.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Monad_let",
    ],
)

#############
ocaml_module(
    name = "_Run_state",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "run_state.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Constraint",
        ":_Constraint_system",
        ":_Cvar",
        ":_Request",
    ],
)

#############
ocaml_module(
    name = "_Snark",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "snark.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Backend_intf",
        ":_Knapsack",
        ":_Merkle_tree",
        ":_Snark0",
    ],
)

#############
ocaml_module(
    name = "_Snark0",
    sig  = ":_Snark0.cmi",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "snark0.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_As_prover",
        ":_As_prover0",
        ":_As_prover_intf",
        ":_Backend_extended",
        ":_Backend_intf",
        ":_Bin_prot_io",
        ":_Boolean",
        ":_Checked",
        ":_Checked_intf",
        ":_Checked_runner",
        ":_Constraint",
        ":_Constraint_system",
        ":_Cvar",
        ":_Enumerable",
        ":_Handle",
        ":_Monad_sequence",
        ":_Number",
        ":_Request",
        ":_Restrict_monad",
        ":_Run_state",
        ":_Snark_intf",
        ":_Typ",
        ":_Typ_monads",
        ":_Types",
    ],
)

ocaml_signature(
    name = "_Snark0.cmi",
    src = "snark0.mli",
    opts = SNARKY_BACKENDLESS_SIGNATURE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Backend_intf",
        ":_Snark_intf",
    ],
)

#############
ocaml_module(
    name = "_Snark_intf",
    struct = "snark_intf.ml",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM, # + ["bignum.bigint"],
    deps = [
        "//bitstring_lib:bitstring_lib",
        # do not sort (buildifier)
        ":_As_prover",
        ":_Boolean",
        ":_Checked",
        ":_Constraint",
        ":_Cvar",
        ":_Enumerable_intf",
        ":_Lens",
        ":_Monad_let",
        ":_Monad_sequence",
        ":_Number_intf",
        ":_Request",
        ":_Run_state",
        ":_Traversable",
        ":_Typ",
        ":_Typ_monads",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Snarky_backendless",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "snarky_backendless.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_As_prover",
        ":_As_prover0",
        ":_As_prover_intf",
        ":_Backend_extended",
        ":_Backend_intf",
        ":_Bin_prot_io",
        ":_Boolean",
        ":_Checked",
        ":_Checked_intf",
        ":_Checked_runner",
        ":_Constraint",
        ":_Constraint_system",
        ":_Cvar",
        ":_Enumerable",
        ":_Enumerable_intf",
        ":_Free_monad",
        ":_Handle",
        ":_Knapsack",
        ":_Lens",
        ":_Merkle_tree",
        ":_Monad_let",
        ":_Monad_sequence",
        ":_Number",
        ":_Number_intf",
        ":_Pedersen",
        ":_Request",
        ":_Restrict_monad",
        ":_Run_state",
        ":_Snark",
        ":_Snark0",
        ":_Snark_intf",
        ":_Traversable",
        ":_Typ",
        ":_Typ_monads",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Traversable",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "traversable.ml",
    deps = SNARKY_BACKENDLESS_DEPS,
	deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Typ",
    struct = "typ.ml",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        "//h_list",
        ":_As_prover",
        ":_As_prover_intf",
        ":_Checked",
        ":_Checked_intf",
        ":_Cvar",
        ":_Restrict_monad",
        ":_Traversable",
        ":_Typ_monads",
        ":_Types",
    ],
)

#############
ocaml_module(
    name = "_Typ_monads",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "typ_monads.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Cvar",
        ":_Free_monad",
    ],
)

#############
ocaml_module(
    name = "_Types",
    opts = SNARKY_BACKENDLESS_MODULE_OPTS,
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_backendless",
    ],
    struct = "types.ml",
    deps_opam = SNARKY_BACKENDLESS_DEPS_OPAM,
    deps = SNARKY_BACKENDLESS_DEPS + [
        # do not sort (buildifier)
        ":_Constraint",
        ":_Cvar",
        ":_Handle",
        ":_Request",
        ":_Run_state",
        ":_Typ_monads",
    ],
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_hash.runtime-lib",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "bin_prot",
        "fieldslib",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//src/base:__pkg__",
    ],
    deps = ["//ppx:ppx_snarky"],
    deps_opam = [
        "ppx_assert",
        "ppx_bin_prot",
        "ppx_compare",
        "ppx_custom_printf",
        "ppx_deriving.enum",
        "ppx_deriving.eq",
        "ppx_fields_conv",
        "ppx_hash",
        "ppx_inline_test",
        "ppx_let",
        "ppx_sexp_conv",
        "ppxlib",
    ]
)
