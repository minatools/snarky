load("@snarky//bzl/config:vars.bzl",
     "CPPFLAGS", "CFLAGS",  "CXXFLAGS", "DDEBUG",
     "ALWAYSLINK", "LINKSTATIC")

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_executable",
    "ocaml_module",
)

COMMON_OPTS = select({
    "//bzl/config:enable_verbose": ["-verbose"],
    "//conditions:default": [],
}) + ["-thread"]

EXEC_OPTS = COMMON_OPTS
IMPL_OPTS = COMMON_OPTS

cc_library(
    name = "vector_ffi_bindings",
    srcs = [":vector_ffi_bindings_c"],
    copts = ["-I.", "-Iexternal/libsnark/caml"] + CPPFLAGS + CFLAGS,
    linkstatic = LINKSTATIC,
    # alwayslink = ALWAYSLINK,
    deps = [
        # do not sort (buildifier)
        "@ocaml//csdk/ctypes",
        "@libsnark//caml:common"
    ],
    visibility = ["//visibility:public"],
)

ocaml_executable(
    name = "gen_vector_stubs",
    opts = EXEC_OPTS,
    deps = [
        # do not sort (buildifier)
        "//src/camlsnark_c/bindings:camlsnark_c_bindings",
        ":gen_vector_stubs.cm_",
    ],
)

genrule(
    name = "vector_ffi_bindings_ml",
    tools = [":gen_vector_stubs"],
    # srcs = [],
    outs = [
        "vector_ffi_bindings.ml"
    ],
    cmd = "\n".join([
        "./$(location :gen_vector_stubs);",
        "cp vector_ffi_bindings.ml \"$(@D)/\"",
    ]),
    visibility = ["//visibility:public"],
)

genrule(
    name = "vector_ffi_bindings_c",
    tools = [":gen_vector_stubs"],
    # srcs = [],
    outs = [
        "vector_ffi_bindings.c",
    ],
    cmd = "\n".join([
        "./$(location :gen_vector_stubs);",
        "cp vector_ffi_bindings.c \"$(@D)/\"",
    ])
)

ocaml_module(
    name = "gen_vector_stubs.cm_",
    src  = "gen_vector_stubs.ml",
    opts = IMPL_OPTS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:ctypes",
        "@opam//pkg:ctypes.stubs",
        "@opam//pkg:core_kernel",
        "//src/camlsnark_c/bindings:camlsnark_c_bindings",
    ],
)
