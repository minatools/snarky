load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "int_flag", "string_flag")
load("@bazel_skylib//lib:selects.bzl", "selects")

################################################################

###############################
####    LIBFQFFT PARAMS    ####

bool_flag( name = "prof_double",
           build_setting_default = False)
config_setting( name = "enable_prof_double",
                flag_values = { ":prof_double": "True" })

#############################
####    SHARED PARAMS    ####
# libff:
config_setting( name = "enable_curve_bn128",      flag_values = { "@//:curve": "bn128" })
config_setting( name = "enable_curve_alt_bn128",  flag_values = { "@//:curve": "alt_bn128" })
config_setting( name = "enable_curve_edwards",    flag_values = { "@//:curve": "edwards" })
config_setting( name = "enable_curve_mnt4",       flag_values = { "@//:curve": "mnt4" })
config_setting( name = "enable_curve_mnt6",       flag_values = { "@//:curve": "mnt6" })

# libff:
config_setting( name = "with_openmp",        flag_values = { "@//:with_openmp": str(True) })
config_setting( name = "without_openmp",       flag_values = { "@//:with_openmp": str(False) })

# ate-pairing:
config_setting( name = "with_libgmp",             flag_values = { "@//:with_libgmp": str(True) })
config_setting( name = "without_libgmp",          flag_values = { "@//:with_libgmp": str(False) })

# ## CURVE: libfqfft, libff
# string_flag( name = "curve",
#              values = ["bn128", "alt_bn128", "edwards", "mnt4", "mnt6", ""],
#              build_setting_default = "bn128")
# config_setting( name = "curve_bn128",
#                 flag_values = { ":curve": "bn128" })
# config_setting( name = "curve_alt_bn128",
#                 flag_values = { ":curve": "alt_bn128" })
# config_setting( name = "curve_edwards",
#                 flag_values = { ":curve": "edwards" })
# config_setting( name = "curve_mnt4",
#                 flag_values = { ":curve": "mnt4" })
# config_setting( name = "curve_mnt6",
#                 flag_values = { ":curve": "mnt6" })

# ## MULTICORE: libfqfft, libff
# bool_flag( name = "multicore",
#            build_setting_default = False)
# config_setting( name = "enable_multicore",
#                 flag_values = { ":multicore": "True" })
# config_setting( name = "disable_multicore",
#                 flag_values = { ":multicore": "False" })

## PROCPS: libfqfft, libff
bool_flag( name = "procps",
           build_setting_default = False)
# default:    -DNO_PROCPS
config_setting( name = "enable_procps",
                flag_values = { ":procps": "True" })
config_setting( name = "disable_procps",
                flag_values = { ":procps": "False" })

# ############################
# # In serialization, output raw binary data (instead of decimal),
# # which is smaller and faster.
config_setting( name = "enable_binary_output", flag_values = { "//:binary_output": str(True) })
config_setting( name = "disable_binary_output", flag_values = { "//:binary_output": str(False) })

################################################################
config_setting( name = "enable_debug",  flag_values = { "//:debug": "True" })
config_setting( name = "disable_debug", flag_values = { "//:debug": "False" })

selects.config_setting_group(
    name = "macos_disable_debug",
    match_all = ["//bzl/host:macos", ":disable_debug"]
)

# # Enable debugging of C++ STL (does not imply DEBUG)
config_setting( name = "enable_cxx_debug", flag_values = { "//:cxx_debug": "true" })

# # Enable link-time and aggressive optimizations
config_setting( name = "enable_optimization", flag_values = { "//:optimize": "true" })

config_setting( name = "enable_verbose",  flag_values = { "//:verbose": str(True) })
config_setting( name = "disable_verbose", flag_values = { "//:verbose": str(False) })

