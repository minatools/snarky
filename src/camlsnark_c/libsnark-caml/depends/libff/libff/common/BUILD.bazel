load("@rules_cc//cc:defs.bzl", "cc_library")
load("@libff//bzl/config:vars.bzl",
     "CPPFLAGS", "CXXFLAGS",
     "DBINARY_OUTPUT", "DCURVE", "DDEBUG",
     "LINKSTATIC", "ALWAYSLINK",
     "DMULTICORE", "DNO_PROCPS", "DPROFILE_OP_COUNTS")

cc_library(
    name = "double",
    srcs = ["double.cpp"],
    hdrs = ["double.hpp"],
    copts = ["-I."] + CPPFLAGS + CXXFLAGS,
    linkstatic = LINKSTATIC,
    defines = DDEBUG + DPROFILE_OP_COUNTS,
    include_prefix = "libff/common",
    deps = [
        "//libff/algebra/fields:bigint",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "common",
    srcs = ["common.cpp"],
    copts = ["-I."] + CPPFLAGS + CXXFLAGS,
    defines = DDEBUG,
    include_prefix = "libff/common",
    linkstatic = LINKSTATIC,
    alwayslink = ALWAYSLINK,
    deps = [
        "//libff/algebra/curves/mnt/mnt4",
        "//libff/algebra/curves/mnt/mnt6",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "logging",
    srcs = ["logging.cpp",
            "logging.hpp"],
    hdrs = ["logging.hpp"],
    copts = ["-I."] + CPPFLAGS + CXXFLAGS,
    defines = DDEBUG,
    include_prefix = "libff/common",
    linkstatic = LINKSTATIC,
    # alwayslink = ALWAYSLINK,
    visibility = ["//visibility:public"],
)

cc_library(
    name = "profiling",
    srcs = ["profiling.cpp"],
    hdrs = ["profiling.hpp"],
    copts = ["-I.", "-Iexternal/libff"]+ CPPFLAGS + CXXFLAGS,
    linkstatic = LINKSTATIC,
    local_defines = DDEBUG + DNO_PROCPS + DPROFILE_OP_COUNTS,
    include_prefix = "libff/common",
    deps = [
        ":profiling_hpp",
        "//libff/algebra/fields:bigint",
        "//libff/common:double",
        "//libff/common/default_types",
    ] + select({
        "//bzl/host:linux": ["//bzl/external/procps"],
        "//bzl/host:macos": []
    }, no_match_error = "ERROR: unsupported host (libff/common:profiling)"),
    visibility = ["//visibility:public"],
)

# to avoid cyclic dependency involving default_types/ec_pp.hpp and curves
cc_library(
    name = "profiling_hpp",
    hdrs = ["profiling.hpp"],
    copts = ["-I."] + CPPFLAGS + CXXFLAGS,
    linkstatic = LINKSTATIC,
    defines = DDEBUG,
    include_prefix = "libff/common",
    deps = [
        "//bzl/external/openssl",
        "//libff/algebra/fields",
        "//bzl/external/libgmp",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "rng",
    hdrs = [
        "rng.hpp",
        "rng.tcc",
    ],
    copts = ["-I."] + CPPFLAGS + CXXFLAGS,
    defines = DDEBUG,
    linkstatic = LINKSTATIC,
    include_prefix = "libff/common",
    visibility = ["//visibility:public"],
    deps = ["//bzl/external/openssl"],
)

## headers only: serialization and rng
## packaged separately to avoid circurlar deps.
cc_library(
    name = "serialization",
    hdrs = [
        "serialization.hpp",
        "serialization.tcc",
    ],
    copts = ["-I."] + CPPFLAGS + CXXFLAGS,
    linkstatic = LINKSTATIC,
    defines = DDEBUG + DBINARY_OUTPUT,
    include_prefix = "libff/common",
    deps = [":utils"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "utils",
    srcs = ["utils.cpp",
            "utils.hpp",
            "utils.tcc",
    ],
    hdrs = [
            "utils.hpp",
            "utils.tcc",
    ],
    copts = ["-I.", "-Iexternal"] + CPPFLAGS + CXXFLAGS,
    defines = DDEBUG,
    include_prefix = "libff/common",
    linkstatic = LINKSTATIC,
    visibility = ["//visibility:public"],
    deps = [
        ":logging",
        "//bzl/external/openssl"
    ],
)
