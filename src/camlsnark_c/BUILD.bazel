load("@snarky//bzl/config:vars.bzl", "CPPFLAGS", "CFLAGS", "LINKSTATIC")

load(
    "@obazl_rules_ocaml//ocaml:build.bzl",
    "ocaml_archive",
    "ocaml_executable",
    "ocaml_interface",
    "ocaml_module",
    "ocaml_ns_module",
)

COMMON_OPTS = select({
    "//bzl/config:enable_verbose": ["-verbose"],
    "//conditions:default": [],
}) + ["-thread"] # , "-linkall"]

LINK_OPTS = select({
    "//bzl/config:always_link": ["-linkall"],
    "//conditions:default": [],
}) + []

EXEC_OPTS = COMMON_OPTS + LINK_OPTS + []
IMPL_OPTS = COMMON_OPTS + LINK_OPTS + []
INTF_OPTS = COMMON_OPTS + LINK_OPTS + []
ARCHIVE_OPTS = COMMON_OPTS + LINK_OPTS + []
COMMON_DEPS = []

CAMLSNARK_C_NS = "Camlsnark_c"

ocaml_module(
    name = "camlsnark_c",
    impl = "camlsnark_c.ml",
    opts = IMPL_OPTS + ["-cclib", "-Wl,-E"],
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:core",
        "@opam//pkg:ctypes",
        "@opam//pkg:ctypes.foreign",
        "//src/camlsnark_c/bindings:camlsnark_c_bindings",
    ],
    cc_deps = select({
        "//bzl/host:linux": {
            ":snark_ffi_bindings": "default",
            "@libff//libff/algebra/curves/mnt753/mnt4753": "default",
            "@libff//libff/algebra/curves/mnt753/mnt4753:public_params": "default",
            "//bzl/external/openssl": "default",
            "//bzl/external/libgmp": "default",
            "//bzl/external/openmp": "default",
            "@libsnark//caml:snark_caml": "default"
        },
        "//bzl/host:macos": {
            ":snark_ffi_bindings": "default",
            "@libff//libff/algebra/curves/mnt753/mnt4753": "default",
            "@libff//libff/algebra/curves/mnt753/mnt4753:public_params": "default",
            "//bzl/external/openssl": "default",
            "//bzl/external/libgmp": "default",
            "//bzl/external/openmp": "default",
            "@libsnark//caml:libsnark_caml.so": "default"
        }
    }, no_match_error = "camlsnark_c camlsnark_c: unsupported platform.  Linux or MacOS only.")
)

# NOTE: we're building this here, in order to keep all tasks
# associated with snark_ffi_bindings in one place; but this module
# serves as a submodule in a different package.
ocaml_module(
    name = "snark_ffi_bindings.cm_",
    impl = "//src/camlsnark_c:libsnark_ffi_bindings_ml",  ## generated file
    ns_module = "//src/camlsnark_c/libsnark_bindings:snarky_libsnark_bindings_ns_module",
    opts = IMPL_OPTS + ["-thread"],
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:ctypes",
        ":camlsnark_c",
    ],
    cc_deps = select({
        "//bzl/host:linux": {
            ":snark_ffi_bindings": "default",
            "@libsnark//caml:snark_caml": "default"
        },
        "//bzl/host:macos": {
            ":snark_ffi_bindings": "default",
            "@libsnark//caml:libsnark_caml.so": "default"
        },
    }, no_match_error = "camlsnark_c snark_ffi_bindings.cm_: unsupported platform.  Linux or MacOS only.")
)

cc_library(
    name = "snark_ffi_bindings",
    srcs = [
        ":libsnark_ffi_bindings_c",
        "@libsnark//caml:template_caml_curve_h.hpp"
    ],
    copts = ["-I.", "-Iexternal",
             "-Iexternal/libsnark/caml",
             ] + CPPFLAGS + CFLAGS,
    linkstatic = LINKSTATIC,
    deps = [
        "@ocaml//csdk:hdrs",
        "@ocaml//csdk/ctypes",
   ] + select({
        "//bzl/host:linux": ["@libsnark//caml:snark_caml"],
        "//bzl/host:macos": ["@libsnark//caml:libsnark_caml.so"]
    }, no_match_error = "camlsnark_c snark_ffi_bindings: unsupported platform.  Linux or MacOS only."),
    visibility = ["//visibility:public"],
)

ocaml_module(
    name = "camlsnark_ctypes_stubs.cm_",
    impl = "camlsnark_ctypes_stubs.ml",
    opts = IMPL_OPTS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        "@opam//pkg:ctypes",
        "@opam//pkg:ctypes.stubs",
        "@opam//pkg:core_kernel",
        "//src/camlsnark_c/bindings:camlsnark_c_bindings",
    ],
)

genrule(
    name = "libsnark_ffi_bindings_c",
    tools = [":camlsnark_ctypes_stubs"],
    outs = [
        "libsnark_ffi_bindings.c",
    ],
    cmd = "\n".join([
        "./$(location :camlsnark_ctypes_stubs);",
        "cp libsnark_ffi_bindings.c \"$(@D)/\"",
    ])
)

genrule(
    name = "libsnark_ffi_bindings_ml",
    tools = [":camlsnark_ctypes_stubs"],
    outs = [
        "libsnark_ffi_bindings.ml"
    ],
    cmd = "\n".join([
        "./$(location //src/camlsnark_c:camlsnark_ctypes_stubs);",
        "cp libsnark_ffi_bindings.ml \"$(@D)/\"",
    ]),
    visibility = ["//src/camlsnark_c/libsnark_bindings:__pkg__"],
)

ocaml_executable(
    name = "camlsnark_ctypes_stubs",
    opts = EXEC_OPTS,
    visibility = ["//visibility:public"],
    deps = [
        # do not sort (buildifier)
        # "//src/camlsnark_c/bindings:camlsnark_c_bindings",
        ":camlsnark_ctypes_stubs.cm_",
    ],
)
