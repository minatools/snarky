load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_archive",
    "ocaml_interface",
    "ocaml_module",
    "ocaml_ns_module",
)
load(
    "//:BUILD.bzl",
    "GLOBAL_ARCHIVE_OPTS",
    "GLOBAL_INTERFACE_OPTS",
    "GLOBAL_MODULE_OPTS",
    "GLOBAL_NS_MODULE_OPTS",
    "REPO_ARCHIVE_OPTS",
    "REPO_INTERFACE_OPTS",
    "REPO_MODULE_OPTS",
    "REPO_NS_MODULE_OPTS",
)
load(
    ":BUILD.bzl",
    "PKG_ARCHIVE_OPTS",
    "PKG_INTERFACE_OPTS",
    "PKG_MODULE_OPTS",
    "PKG_NS_MODULE_OPTS",
)

################################################################
## STANZA 1: SNARKY_UNIVERSE
################################################################
SNARKY_UNIVERSE_ARCHIVE_OPTS = GLOBAL_ARCHIVE_OPTS + REPO_ARCHIVE_OPTS + PKG_ARCHIVE_OPTS + []

SNARKY_UNIVERSE_INTERFACE_OPTS = []

SNARKY_UNIVERSE_MODULE_OPTS = GLOBAL_MODULE_OPTS + REPO_MODULE_OPTS + PKG_MODULE_OPTS + []

SNARKY_UNIVERSE_NS_MODULE_OPTS = []

SNARKY_UNIVERSE_DEPS = [
    # do not sort (buildifier)
    "@opam//pkg:core",
    "@snarky//sponge",
    "@snarky//snarkette",
    "@snarky//snarky_integer",
    "@snarky//snarky_curve",
    "@snarky//snarky_signature",
    "@snarky//src:snarky",
]

SNARKY_UNIVERSE_PPX = "//bzl/ppx:ppx[ppx_deriving_yojson][ppx_jane][ppx_deriving.eq]"

SNARKY_UNIVERSE_PPX_ARGS = [
    # do not sort (buildifier)
    "-inline-test-lib",
    "snarky_universe",
]

ocaml_archive(
    name = "snarky_universe",
    opts = SNARKY_UNIVERSE_ARCHIVE_OPTS,
    visibility = ["//visibility:public"],
    deps = SNARKY_UNIVERSE_DEPS + [
        # do not sort (buildifier)
        ":Curve",
        ":Group",
        ":Hash",
        ":Input_spec",
        ":Intf",
        ":Membership_proof",
        ":Merkle_tree_unchecked",
        ":Snarky_universe",
    ],
)

ocaml_ns_module(
    name = "Snarky_universe_ns",
    ns = "snarky_universe",
    opts = SNARKY_UNIVERSE_NS_MODULE_OPTS,
    submodules = [
        # do not sort (buildifier)
        "curve.ml",
        "group.ml",
        "hash.ml",
        "input_spec.ml",
        "intf.ml",
        "membership_proof.ml",
        "merkle_tree_unchecked.ml",
        "snarky_universe.ml",
    ],
)

ocaml_module(
    name = "Curve",
    src = "curve.ml",
    ns_module = ":Snarky_universe_ns",
    opts = SNARKY_UNIVERSE_MODULE_OPTS,
    ppx = SNARKY_UNIVERSE_PPX,
    ppx_args = SNARKY_UNIVERSE_PPX_ARGS,
    deps = SNARKY_UNIVERSE_DEPS,
)

ocaml_module(
    name = "Group",
    src = "group.ml",
    ns_module = ":Snarky_universe_ns",
    opts = SNARKY_UNIVERSE_MODULE_OPTS,
    ppx = SNARKY_UNIVERSE_PPX,
    ppx_args = SNARKY_UNIVERSE_PPX_ARGS,
    deps = SNARKY_UNIVERSE_DEPS + [
        # do not sort (buildifier)
        ":Curve",
    ],
)

ocaml_module(
    name = "Hash",
    src = "hash.ml",
    ns_module = ":Snarky_universe_ns",
    opts = SNARKY_UNIVERSE_MODULE_OPTS,
    ppx = SNARKY_UNIVERSE_PPX,
    ppx_args = SNARKY_UNIVERSE_PPX_ARGS,
    deps = SNARKY_UNIVERSE_DEPS + [
        # do not sort (buildifier)
        ":Curve",
    ],
)

ocaml_module(
    name = "Input_spec",
    src = "input_spec.ml",
    ns_module = ":Snarky_universe_ns",
    opts = SNARKY_UNIVERSE_MODULE_OPTS,
    ppx = SNARKY_UNIVERSE_PPX,
    ppx_args = SNARKY_UNIVERSE_PPX_ARGS,
    deps = SNARKY_UNIVERSE_DEPS,
)

ocaml_module(
    name = "Intf",
    src = "intf.ml",
    ns_module = ":Snarky_universe_ns",
    opts = SNARKY_UNIVERSE_MODULE_OPTS,
    ppx = SNARKY_UNIVERSE_PPX,
    ppx_args = SNARKY_UNIVERSE_PPX_ARGS,
    deps = SNARKY_UNIVERSE_DEPS + [
        # do not sort (buildifier)
        ":Input_spec",
    ],
)

ocaml_module(
    name = "Membership_proof",
    src = "membership_proof.ml",
    ns_module = ":Snarky_universe_ns",
    opts = SNARKY_UNIVERSE_MODULE_OPTS,
    ppx = SNARKY_UNIVERSE_PPX,
    ppx_args = SNARKY_UNIVERSE_PPX_ARGS,
    deps = SNARKY_UNIVERSE_DEPS + ["@opam//pkg:ppx_deriving_yojson.runtime"]
)

ocaml_module(
    name = "Merkle_tree_unchecked",
    src = "merkle_tree_unchecked.ml",
    ns_module = ":Snarky_universe_ns",
    opts = SNARKY_UNIVERSE_MODULE_OPTS,
    ppx = SNARKY_UNIVERSE_PPX,
    ppx_args = SNARKY_UNIVERSE_PPX_ARGS,
    deps = SNARKY_UNIVERSE_DEPS + [
        # do not sort (buildifier)
        ":Membership_proof",
    ],
)

ocaml_module(
    name = "Snarky_universe",
    src = "snarky_universe.ml",
    intf = ":_Snarky_universe",
    ns_module = ":Snarky_universe_ns",
    opts = SNARKY_UNIVERSE_MODULE_OPTS,
    ppx = SNARKY_UNIVERSE_PPX,
    ppx_args = SNARKY_UNIVERSE_PPX_ARGS,
    deps = SNARKY_UNIVERSE_DEPS + [
        # do not sort (buildifier)
        ":Curve",
        ":Group",
        ":Hash",
        ":Input_spec",
        ":Intf",
        ":Membership_proof",
        ":Merkle_tree_unchecked",
    ],
)

ocaml_interface(
    name = "_Snarky_universe",
    src = "snarky_universe.mli",
    ns_module = ":Snarky_universe_ns",
    opts = SNARKY_UNIVERSE_INTERFACE_OPTS,
    ppx = SNARKY_UNIVERSE_PPX,
    ppx_args = SNARKY_UNIVERSE_PPX_ARGS,
    deps = SNARKY_UNIVERSE_DEPS + [
        # do not sort (buildifier)
        ":Curve",
        ":Intf",
    ],
)

################################################################
#### Package CLI Options
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")

bool_flag(
    name = "debug",
    build_setting_default = True,
)

config_setting(
    name = "enable_debug",
    flag_values = {":debug": str(True)},
)

bool_flag(
    name = "verbose",
    build_setting_default = False,
)

config_setting(
    name = "enable_verbose",
    flag_values = {":verbose": str(True)},
)
