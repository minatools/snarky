## BROKEN: depends on obsolete Snarky

load(
    "@obazl_rules_ocaml//ocaml:rules.bzl",
    "ocaml_module",
    "ocaml_ns_library",
    "ocaml_signature",
    "ppx_executable",
)

################################################################
## STANZA 1: LIBRARY SNARKY_UNIVERSE
################################################################
SNARKY_UNIVERSE_DEPS = [
    # do not sort (buildifier)
    "@snarky//sponge",
    "@snarky//snarkette",
    "@snarky//snarky_integer",
    "@snarky//snarky_curve",
    "@snarky//snarky_signature",
    "@snarky//src/intf:snarky_intf",
]

SNARKY_UNIVERSE_DEPS_OPAM = [
    "core",
]

##############
# ocaml_archive(
#     name = "snarky_universe",
#     opts = [],
#     visibility = ["//visibility:public"],
#     deps = SNARKY_UNIVERSE_DEPS + [
#         # do not sort (buildifier)
#         ":_Curve",
#         ":_Group",
#         ":_Hash",
#         ":_Input_spec",
#         ":_Intf",
#         ":_Membership_proof",
#         ":_Merkle_tree_unchecked",
#         ":_Snarky_universe",
#     ],
#     deps_opam = SNARKY_UNIVERSE_DEPS_OPAM
# )

#########
ocaml_ns_library(
    name = "#snarky_universe",
    submodules = {
        ":_Curve": "Curve",
        ":_Group": "Group",
        ":_Hash": "Hash",
        ":_Input_spec": "Input_spec",
        ":_Intf": "Intf",
        ":_Membership_proof": "Membership_proof",
        ":_Merkle_tree_unchecked": "Merkle_tree_unchecked",
        ":_Snarky_universe": "Snarky_universe",
    }
)

#############
ocaml_module(
    name = "_Curve",
    struct = "curve.ml",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_universe",
    ],
    deps = SNARKY_UNIVERSE_DEPS,
    deps_opam = SNARKY_UNIVERSE_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Group",
    struct = "group.ml",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_universe",
    ],
    deps = SNARKY_UNIVERSE_DEPS + [
        # do not sort (buildifier)
        ":_Curve",
    ],
    deps_opam = SNARKY_UNIVERSE_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Hash",
    struct = "hash.ml",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_universe",
    ],
    deps = SNARKY_UNIVERSE_DEPS + [
        # do not sort (buildifier)
        ":_Curve",
    ],
    deps_opam = SNARKY_UNIVERSE_DEPS_OPAM,
)

#############
ocaml_module(
    name = "_Input_spec",
    struct = "input_spec.ml",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_universe",
    ],
    deps = SNARKY_UNIVERSE_DEPS,
    deps_opam = SNARKY_UNIVERSE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Intf",
    struct = "intf.ml",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_universe",
    ],
    deps = SNARKY_UNIVERSE_DEPS + [
        # do not sort (buildifier)
        ":_Input_spec",
    ],
    deps_opam = SNARKY_UNIVERSE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Membership_proof",
    struct = "membership_proof.ml",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_universe",
    ],
    ppx_print = "@ppx//print:binary",
    deps = SNARKY_UNIVERSE_DEPS,
    deps_opam = SNARKY_UNIVERSE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Merkle_tree_unchecked",
    struct = "merkle_tree_unchecked.ml",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_universe",
    ],
    deps = SNARKY_UNIVERSE_DEPS + [
        # do not sort (buildifier)
        ":_Membership_proof",
    ],
    deps_opam = SNARKY_UNIVERSE_DEPS_OPAM
)

#############
ocaml_module(
    name = "_Snarky_universe",
    struct = "snarky_universe.ml",
    sig  = ":_Snarky_universe.cmi",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_universe",
    ],
    deps = SNARKY_UNIVERSE_DEPS + [
        # do not sort (buildifier)
        ":_Curve",
        ":_Group",
        ":_Hash",
        ":_Input_spec",
        ":_Intf",
        ":_Membership_proof",
        ":_Merkle_tree_unchecked",
    ],
    deps_opam = SNARKY_UNIVERSE_DEPS_OPAM
)

################
ocaml_signature(
    name = "_Snarky_universe.cmi",
    src  = "snarky_universe.mli",
    ppx = ":ppx1.exe",
    ppx_args = [
        # do not sort (buildifier)
        "-inline-test-lib",
        "snarky_universe",
    ],
    deps = SNARKY_UNIVERSE_DEPS + [
        # do not sort (buildifier)
        ":_Curve",
        ":_Intf",
    ],
    deps_opam = SNARKY_UNIVERSE_DEPS_OPAM
)

###############
ppx_executable(
    name = "ppx1.exe",
    deps_adjunct_opam = [
        "ppx_expect.collector",
        "yojson",
        "ppx_hash.runtime-lib",
        "ppx_deriving_yojson.runtime",
        "ppx_sexp_conv.runtime-lib",
        "ppx_deriving.runtime",
        "ppx_assert.runtime-lib",
        "ppx_compare.runtime-lib",
        "ppx_inline_test.runtime-lib",
        "ppx_bench.runtime-lib",
        "ppx_enumerate.runtime-lib",
        "ppx_module_timer.runtime",
    ],
    main = "//bzl/ppx/exe:ppxlib_driver",
    opts = [],
    visibility = [
        "//snarky_universe:__pkg__",
    ],
    deps_opam = [
        "ppx_deriving.eq",
        "ppx_deriving_yojson",
        "ppx_jane",
        "ppxlib",
    ],
)
